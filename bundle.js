(()=>{var t={9662:(t,r,e)=>{var n=e(614),o=e(6330),i=TypeError;t.exports=function(t){if(n(t))return t;throw i(o(t)+" is not a function")}},9670:(t,r,e)=>{var n=e(111),o=String,i=TypeError;t.exports=function(t){if(n(t))return t;throw i(o(t)+" is not an object")}},8533:(t,r,e)=>{"use strict";var n=e(2092).forEach,o=e(9341)("forEach");t.exports=o?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},1318:(t,r,e)=>{var n=e(5656),o=e(1400),i=e(6244),u=function(t){return function(r,e,u){var a,c=n(r),s=i(c),l=o(u,s);if(t&&e!=e){for(;s>l;)if((a=c[l++])!=a)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===e)return t||l||0;return!t&&-1}};t.exports={includes:u(!0),indexOf:u(!1)}},2092:(t,r,e)=>{var n=e(9974),o=e(1702),i=e(8361),u=e(7908),a=e(6244),c=e(5417),s=o([].push),l=function(t){var r=1==t,e=2==t,o=3==t,l=4==t,f=6==t,p=7==t,h=5==t||f;return function(v,d,y,b){for(var m,w,g=u(v),x=i(g),S=n(d,y),O=a(x),T=0,j=b||c,E=r?j(v,O):e||p?j(v,0):void 0;O>T;T++)if((h||T in x)&&(w=S(m=x[T],T,g),t))if(r)E[T]=w;else if(w)switch(t){case 3:return!0;case 5:return m;case 6:return T;case 2:s(E,m)}else switch(t){case 4:return!1;case 7:s(E,m)}return f?-1:o||l?l:E}};t.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6),filterReject:l(7)}},1194:(t,r,e)=>{var n=e(7293),o=e(5112),i=e(7392),u=o("species");t.exports=function(t){return i>=51||!n((function(){var r=[];return(r.constructor={})[u]=function(){return{foo:1}},1!==r[t](Boolean).foo}))}},9341:(t,r,e)=>{"use strict";var n=e(7293);t.exports=function(t,r){var e=[][t];return!!e&&n((function(){e.call(null,r||function(){return 1},1)}))}},7475:(t,r,e)=>{var n=e(3157),o=e(4411),i=e(111),u=e(5112)("species"),a=Array;t.exports=function(t){var r;return n(t)&&(r=t.constructor,(o(r)&&(r===a||n(r.prototype))||i(r)&&null===(r=r[u]))&&(r=void 0)),void 0===r?a:r}},5417:(t,r,e)=>{var n=e(7475);t.exports=function(t,r){return new(n(t))(0===r?0:r)}},4326:(t,r,e)=>{var n=e(84),o=n({}.toString),i=n("".slice);t.exports=function(t){return i(o(t),8,-1)}},648:(t,r,e)=>{var n=e(1694),o=e(614),i=e(4326),u=e(5112)("toStringTag"),a=Object,c="Arguments"==i(function(){return arguments}());t.exports=n?i:function(t){var r,e,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,r){try{return t[r]}catch(t){}}(r=a(t),u))?e:c?i(r):"Object"==(n=i(r))&&o(r.callee)?"Arguments":n}},9920:(t,r,e)=>{var n=e(2597),o=e(3887),i=e(1236),u=e(3070);t.exports=function(t,r,e){for(var a=o(r),c=u.f,s=i.f,l=0;l<a.length;l++){var f=a[l];n(t,f)||e&&n(e,f)||c(t,f,s(r,f))}}},8880:(t,r,e)=>{var n=e(9781),o=e(3070),i=e(9114);t.exports=n?function(t,r,e){return o.f(t,r,i(1,e))}:function(t,r,e){return t[r]=e,t}},9114:t=>{t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},6135:(t,r,e)=>{"use strict";var n=e(4948),o=e(3070),i=e(9114);t.exports=function(t,r,e){var u=n(r);u in t?o.f(t,u,i(0,e)):t[u]=e}},8052:(t,r,e)=>{var n=e(614),o=e(3070),i=e(6339),u=e(3072);t.exports=function(t,r,e,a){a||(a={});var c=a.enumerable,s=void 0!==a.name?a.name:r;if(n(e)&&i(e,s,a),a.global)c?t[r]=e:u(r,e);else{try{a.unsafe?t[r]&&(c=!0):delete t[r]}catch(t){}c?t[r]=e:o.f(t,r,{value:e,enumerable:!1,configurable:!a.nonConfigurable,writable:!a.nonWritable})}return t}},3072:(t,r,e)=>{var n=e(7854),o=Object.defineProperty;t.exports=function(t,r){try{o(n,t,{value:r,configurable:!0,writable:!0})}catch(e){n[t]=r}return r}},9781:(t,r,e)=>{var n=e(7293);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},4154:t=>{var r="object"==typeof document&&document.all,e=void 0===r&&void 0!==r;t.exports={all:r,IS_HTMLDDA:e}},317:(t,r,e)=>{var n=e(7854),o=e(111),i=n.document,u=o(i)&&o(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},7207:t=>{var r=TypeError;t.exports=function(t){if(t>9007199254740991)throw r("Maximum allowed index exceeded");return t}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(t,r,e)=>{var n=e(317)("span").classList,o=n&&n.constructor&&n.constructor.prototype;t.exports=o===Object.prototype?void 0:o},8113:(t,r,e)=>{var n=e(5005);t.exports=n("navigator","userAgent")||""},7392:(t,r,e)=>{var n,o,i=e(7854),u=e(8113),a=i.process,c=i.Deno,s=a&&a.versions||c&&c.version,l=s&&s.v8;l&&(o=(n=l.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&u&&(!(n=u.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=u.match(/Chrome\/(\d+)/))&&(o=+n[1]),t.exports=o},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,r,e)=>{var n=e(7854),o=e(1236).f,i=e(8880),u=e(8052),a=e(3072),c=e(9920),s=e(4705);t.exports=function(t,r){var e,l,f,p,h,v=t.target,d=t.global,y=t.stat;if(e=d?n:y?n[v]||a(v,{}):(n[v]||{}).prototype)for(l in r){if(p=r[l],f=t.dontCallGetSet?(h=o(e,l))&&h.value:e[l],!s(d?l:v+(y?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;c(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),u(e,l,p,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},9974:(t,r,e)=>{var n=e(1702),o=e(9662),i=e(4374),u=n(n.bind);t.exports=function(t,r){return o(t),void 0===r?t:i?u(t,r):function(){return t.apply(r,arguments)}}},4374:(t,r,e)=>{var n=e(7293);t.exports=!n((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},6916:(t,r,e)=>{var n=e(4374),o=Function.prototype.call;t.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},6530:(t,r,e)=>{var n=e(9781),o=e(2597),i=Function.prototype,u=n&&Object.getOwnPropertyDescriptor,a=o(i,"name"),c=a&&"something"===function(){}.name,s=a&&(!n||n&&u(i,"name").configurable);t.exports={EXISTS:a,PROPER:c,CONFIGURABLE:s}},84:(t,r,e)=>{var n=e(4374),o=Function.prototype,i=o.call,u=n&&o.bind.bind(i,i);t.exports=n?u:function(t){return function(){return i.apply(t,arguments)}}},1702:(t,r,e)=>{var n=e(4326),o=e(84);t.exports=function(t){if("Function"===n(t))return o(t)}},5005:(t,r,e)=>{var n=e(7854),o=e(614),i=function(t){return o(t)?t:void 0};t.exports=function(t,r){return arguments.length<2?i(n[t]):n[t]&&n[t][r]}},8173:(t,r,e)=>{var n=e(9662),o=e(8554);t.exports=function(t,r){var e=t[r];return o(e)?void 0:n(e)}},7854:(t,r,e)=>{var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e.g&&e.g)||function(){return this}()||Function("return this")()},2597:(t,r,e)=>{var n=e(1702),o=e(7908),i=n({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,r){return i(o(t),r)}},3501:t=>{t.exports={}},4664:(t,r,e)=>{var n=e(9781),o=e(7293),i=e(317);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(t,r,e)=>{var n=e(1702),o=e(7293),i=e(4326),u=Object,a=n("".split);t.exports=o((function(){return!u("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?a(t,""):u(t)}:u},2788:(t,r,e)=>{var n=e(1702),o=e(614),i=e(5465),u=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return u(t)}),t.exports=i.inspectSource},9909:(t,r,e)=>{var n,o,i,u=e(4811),a=e(7854),c=e(111),s=e(8880),l=e(2597),f=e(5465),p=e(6200),h=e(3501),v="Object already initialized",d=a.TypeError,y=a.WeakMap;if(u||f.state){var b=f.state||(f.state=new y);b.get=b.get,b.has=b.has,b.set=b.set,n=function(t,r){if(b.has(t))throw d(v);return r.facade=t,b.set(t,r),r},o=function(t){return b.get(t)||{}},i=function(t){return b.has(t)}}else{var m=p("state");h[m]=!0,n=function(t,r){if(l(t,m))throw d(v);return r.facade=t,s(t,m,r),r},o=function(t){return l(t,m)?t[m]:{}},i=function(t){return l(t,m)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(r){var e;if(!c(r)||(e=o(r)).type!==t)throw d("Incompatible receiver, "+t+" required");return e}}}},3157:(t,r,e)=>{var n=e(4326);t.exports=Array.isArray||function(t){return"Array"==n(t)}},614:(t,r,e)=>{var n=e(4154),o=n.all;t.exports=n.IS_HTMLDDA?function(t){return"function"==typeof t||t===o}:function(t){return"function"==typeof t}},4411:(t,r,e)=>{var n=e(1702),o=e(7293),i=e(614),u=e(648),a=e(5005),c=e(2788),s=function(){},l=[],f=a("Reflect","construct"),p=/^\s*(?:class|function)\b/,h=n(p.exec),v=!p.exec(s),d=function(t){if(!i(t))return!1;try{return f(s,l,t),!0}catch(t){return!1}},y=function(t){if(!i(t))return!1;switch(u(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return v||!!h(p,c(t))}catch(t){return!0}};y.sham=!0,t.exports=!f||o((function(){var t;return d(d.call)||!d(Object)||!d((function(){t=!0}))||t}))?y:d},4705:(t,r,e)=>{var n=e(7293),o=e(614),i=/#|\.prototype\./,u=function(t,r){var e=c[a(t)];return e==l||e!=s&&(o(r)?n(r):!!r)},a=u.normalize=function(t){return String(t).replace(i,".").toLowerCase()},c=u.data={},s=u.NATIVE="N",l=u.POLYFILL="P";t.exports=u},8554:t=>{t.exports=function(t){return null==t}},111:(t,r,e)=>{var n=e(614),o=e(4154),i=o.all;t.exports=o.IS_HTMLDDA?function(t){return"object"==typeof t?null!==t:n(t)||t===i}:function(t){return"object"==typeof t?null!==t:n(t)}},1913:t=>{t.exports=!1},2190:(t,r,e)=>{var n=e(5005),o=e(614),i=e(7976),u=e(3307),a=Object;t.exports=u?function(t){return"symbol"==typeof t}:function(t){var r=n("Symbol");return o(r)&&i(r.prototype,a(t))}},6244:(t,r,e)=>{var n=e(7466);t.exports=function(t){return n(t.length)}},6339:(t,r,e)=>{var n=e(7293),o=e(614),i=e(2597),u=e(9781),a=e(6530).CONFIGURABLE,c=e(2788),s=e(9909),l=s.enforce,f=s.get,p=Object.defineProperty,h=u&&!n((function(){return 8!==p((function(){}),"length",{value:8}).length})),v=String(String).split("String"),d=t.exports=function(t,r,e){"Symbol("===String(r).slice(0,7)&&(r="["+String(r).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),e&&e.getter&&(r="get "+r),e&&e.setter&&(r="set "+r),(!i(t,"name")||a&&t.name!==r)&&(u?p(t,"name",{value:r,configurable:!0}):t.name=r),h&&e&&i(e,"arity")&&t.length!==e.arity&&p(t,"length",{value:e.arity});try{e&&i(e,"constructor")&&e.constructor?u&&p(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var n=l(t);return i(n,"source")||(n.source=v.join("string"==typeof r?r:"")),t};Function.prototype.toString=d((function(){return o(this)&&f(this).source||c(this)}),"toString")},4758:t=>{var r=Math.ceil,e=Math.floor;t.exports=Math.trunc||function(t){var n=+t;return(n>0?e:r)(n)}},3070:(t,r,e)=>{var n=e(9781),o=e(4664),i=e(3353),u=e(9670),a=e(4948),c=TypeError,s=Object.defineProperty,l=Object.getOwnPropertyDescriptor;r.f=n?i?function(t,r,e){if(u(t),r=a(r),u(e),"function"==typeof t&&"prototype"===r&&"value"in e&&"writable"in e&&!e.writable){var n=l(t,r);n&&n.writable&&(t[r]=e.value,e={configurable:"configurable"in e?e.configurable:n.configurable,enumerable:"enumerable"in e?e.enumerable:n.enumerable,writable:!1})}return s(t,r,e)}:s:function(t,r,e){if(u(t),r=a(r),u(e),o)try{return s(t,r,e)}catch(t){}if("get"in e||"set"in e)throw c("Accessors not supported");return"value"in e&&(t[r]=e.value),t}},1236:(t,r,e)=>{var n=e(9781),o=e(6916),i=e(5296),u=e(9114),a=e(5656),c=e(4948),s=e(2597),l=e(4664),f=Object.getOwnPropertyDescriptor;r.f=n?f:function(t,r){if(t=a(t),r=c(r),l)try{return f(t,r)}catch(t){}if(s(t,r))return u(!o(i.f,t,r),t[r])}},8006:(t,r,e)=>{var n=e(6324),o=e(748).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},5181:(t,r)=>{r.f=Object.getOwnPropertySymbols},7976:(t,r,e)=>{var n=e(1702);t.exports=n({}.isPrototypeOf)},6324:(t,r,e)=>{var n=e(1702),o=e(2597),i=e(5656),u=e(1318).indexOf,a=e(3501),c=n([].push);t.exports=function(t,r){var e,n=i(t),s=0,l=[];for(e in n)!o(a,e)&&o(n,e)&&c(l,e);for(;r.length>s;)o(n,e=r[s++])&&(~u(l,e)||c(l,e));return l}},5296:(t,r)=>{"use strict";var e={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!e.call({1:2},1);r.f=o?function(t){var r=n(this,t);return!!r&&r.enumerable}:e},288:(t,r,e)=>{"use strict";var n=e(1694),o=e(648);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},2140:(t,r,e)=>{var n=e(6916),o=e(614),i=e(111),u=TypeError;t.exports=function(t,r){var e,a;if("string"===r&&o(e=t.toString)&&!i(a=n(e,t)))return a;if(o(e=t.valueOf)&&!i(a=n(e,t)))return a;if("string"!==r&&o(e=t.toString)&&!i(a=n(e,t)))return a;throw u("Can't convert object to primitive value")}},3887:(t,r,e)=>{var n=e(5005),o=e(1702),i=e(8006),u=e(5181),a=e(9670),c=o([].concat);t.exports=n("Reflect","ownKeys")||function(t){var r=i.f(a(t)),e=u.f;return e?c(r,e(t)):r}},4488:(t,r,e)=>{var n=e(8554),o=TypeError;t.exports=function(t){if(n(t))throw o("Can't call method on "+t);return t}},6200:(t,r,e)=>{var n=e(2309),o=e(9711),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:(t,r,e)=>{var n=e(7854),o=e(3072),i="__core-js_shared__",u=n[i]||o(i,{});t.exports=u},2309:(t,r,e)=>{var n=e(1913),o=e(5465);(t.exports=function(t,r){return o[t]||(o[t]=void 0!==r?r:{})})("versions",[]).push({version:"3.26.0",mode:n?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.26.0/LICENSE",source:"https://github.com/zloirock/core-js"})},6293:(t,r,e)=>{var n=e(7392),o=e(7293);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},1400:(t,r,e)=>{var n=e(9303),o=Math.max,i=Math.min;t.exports=function(t,r){var e=n(t);return e<0?o(e+r,0):i(e,r)}},5656:(t,r,e)=>{var n=e(8361),o=e(4488);t.exports=function(t){return n(o(t))}},9303:(t,r,e)=>{var n=e(4758);t.exports=function(t){var r=+t;return r!=r||0===r?0:n(r)}},7466:(t,r,e)=>{var n=e(9303),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},7908:(t,r,e)=>{var n=e(4488),o=Object;t.exports=function(t){return o(n(t))}},7593:(t,r,e)=>{var n=e(6916),o=e(111),i=e(2190),u=e(8173),a=e(2140),c=e(5112),s=TypeError,l=c("toPrimitive");t.exports=function(t,r){if(!o(t)||i(t))return t;var e,c=u(t,l);if(c){if(void 0===r&&(r="default"),e=n(c,t,r),!o(e)||i(e))return e;throw s("Can't convert object to primitive value")}return void 0===r&&(r="number"),a(t,r)}},4948:(t,r,e)=>{var n=e(7593),o=e(2190);t.exports=function(t){var r=n(t,"string");return o(r)?r:r+""}},1694:(t,r,e)=>{var n={};n[e(5112)("toStringTag")]="z",t.exports="[object z]"===String(n)},6330:t=>{var r=String;t.exports=function(t){try{return r(t)}catch(t){return"Object"}}},9711:(t,r,e)=>{var n=e(1702),o=0,i=Math.random(),u=n(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+u(++o+i,36)}},3307:(t,r,e)=>{var n=e(6293);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(t,r,e)=>{var n=e(9781),o=e(7293);t.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},4811:(t,r,e)=>{var n=e(7854),o=e(614),i=n.WeakMap;t.exports=o(i)&&/native code/.test(String(i))},5112:(t,r,e)=>{var n=e(7854),o=e(2309),i=e(2597),u=e(9711),a=e(6293),c=e(3307),s=o("wks"),l=n.Symbol,f=l&&l.for,p=c?l:l&&l.withoutSetter||u;t.exports=function(t){if(!i(s,t)||!a&&"string"!=typeof s[t]){var r="Symbol."+t;a&&i(l,t)?s[t]=l[t]:s[t]=c&&f?f(r):p(r)}return s[t]}},2222:(t,r,e)=>{"use strict";var n=e(2109),o=e(7293),i=e(3157),u=e(111),a=e(7908),c=e(6244),s=e(7207),l=e(6135),f=e(5417),p=e(1194),h=e(5112),v=e(7392),d=h("isConcatSpreadable"),y=v>=51||!o((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),b=p("concat"),m=function(t){if(!u(t))return!1;var r=t[d];return void 0!==r?!!r:i(t)};n({target:"Array",proto:!0,arity:1,forced:!y||!b},{concat:function(t){var r,e,n,o,i,u=a(this),p=f(u,0),h=0;for(r=-1,n=arguments.length;r<n;r++)if(m(i=-1===r?u:arguments[r]))for(o=c(i),s(h+o),e=0;e<o;e++,h++)e in i&&l(p,h,i[e]);else s(h+1),l(p,h++,i);return p.length=h,p}})},9554:(t,r,e)=>{"use strict";var n=e(2109),o=e(8533);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},9070:(t,r,e)=>{var n=e(2109),o=e(9781),i=e(3070).f;n({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!o},{defineProperty:i})},1539:(t,r,e)=>{var n=e(1694),o=e(8052),i=e(288);n||o(Object.prototype,"toString",i,{unsafe:!0})},4747:(t,r,e)=>{var n=e(7854),o=e(8324),i=e(8509),u=e(8533),a=e(8880),c=function(t){if(t&&t.forEach!==u)try{a(t,"forEach",u)}catch(r){t.forEach=u}};for(var s in o)o[s]&&c(n[s]&&n[s].prototype);c(i)}},r={};function e(n){var o=r[n];if(void 0!==o)return o.exports;var i=r[n]={exports:{}};return t[n](i,i.exports,e),i.exports}e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";e(9554),e(1539),e(4747),e(9070);var t=function(r,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])},t(r,e)};function r(r,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=r}t(r,e),r.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var n=function(){return n=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var o in r=arguments[e])Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o]);return t},n.apply(this,arguments)};function o(t,r){var e,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(t,u)}catch(t){i=[6,t],n=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function i(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var n,o,i=e.call(t),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function a(t,r,e){if(e||2===arguments.length)for(var n,o=0,i=r.length;o<i;o++)!n&&o in r||(n||(n=Array.prototype.slice.call(r,0,o)),n[o]=r[o]);return t.concat(n||Array.prototype.slice.call(r))}function c(t){return this instanceof c?(this.v=t,this):new c(t)}function s(t,r,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=e.apply(t,r||[]),i=[];return n={},u("next"),u("throw"),u("return"),n[Symbol.asyncIterator]=function(){return this},n;function u(t){o[t]&&(n[t]=function(r){return new Promise((function(e,n){i.push([t,r,e,n])>1||a(t,r)}))})}function a(t,r){try{(e=o[t](r)).value instanceof c?Promise.resolve(e.value.v).then(s,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function s(t){a("next",t)}function l(t){a("throw",t)}function f(t,r){t(r),i.shift(),i.length&&a(i[0][0],i[0][1])}}function l(t){return"function"==typeof t}function f(t){var r=t((function(t){Error.call(t),t.stack=(new Error).stack}));return r.prototype=Object.create(Error.prototype),r.prototype.constructor=r,r}Object.create,Object.create;var p=f((function(t){return function(r){t(this),this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(t,r){return r+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r}}));function h(t,r){if(t){var e=t.indexOf(r);0<=e&&t.splice(e,1)}}var v=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var r;return t.prototype.unsubscribe=function(){var t,r,e,n,o;if(!this.closed){this.closed=!0;var c=this._parentage;if(c)if(this._parentage=null,Array.isArray(c))try{for(var s=i(c),f=s.next();!f.done;f=s.next())f.value.remove(this)}catch(r){t={error:r}}finally{try{f&&!f.done&&(r=s.return)&&r.call(s)}finally{if(t)throw t.error}}else c.remove(this);var h=this.initialTeardown;if(l(h))try{h()}catch(t){o=t instanceof p?t.errors:[t]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var d=i(v),b=d.next();!b.done;b=d.next()){var m=b.value;try{y(m)}catch(t){o=null!=o?o:[],t instanceof p?o=a(a([],u(o)),u(t.errors)):o.push(t)}}}catch(t){e={error:t}}finally{try{b&&!b.done&&(n=d.return)&&n.call(d)}finally{if(e)throw e.error}}}if(o)throw new p(o)}},t.prototype.add=function(r){var e;if(r&&r!==this)if(this.closed)y(r);else{if(r instanceof t){if(r.closed||r._hasParent(this))return;r._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(r)}},t.prototype._hasParent=function(t){var r=this._parentage;return r===t||Array.isArray(r)&&r.includes(t)},t.prototype._addParent=function(t){var r=this._parentage;this._parentage=Array.isArray(r)?(r.push(t),r):r?[r,t]:t},t.prototype._removeParent=function(t){var r=this._parentage;r===t?this._parentage=null:Array.isArray(r)&&h(r,t)},t.prototype.remove=function(r){var e=this._finalizers;e&&h(e,r),r instanceof t&&r._removeParent(this)},t.EMPTY=((r=new t).closed=!0,r),t}();function d(t){return t instanceof v||t&&"closed"in t&&l(t.remove)&&l(t.add)&&l(t.unsubscribe)}function y(t){l(t)?t():t.unsubscribe()}v.EMPTY;var b=function(t){function e(r,e){return t.call(this)||this}return r(e,t),e.prototype.schedule=function(t,r){return void 0===r&&(r=0),this},e}(v),m={setInterval:function(t,r){for(var e=[],n=2;n<arguments.length;n++)e[n-2]=arguments[n];var o=m.delegate;return(null==o?void 0:o.setInterval)?o.setInterval.apply(o,a([t,r],u(e))):setInterval.apply(void 0,a([t,r],u(e)))},clearInterval:function(t){var r=m.delegate;return((null==r?void 0:r.clearInterval)||clearInterval)(t)},delegate:void 0},w=function(t){function e(r,e){var n=t.call(this,r,e)||this;return n.scheduler=r,n.work=e,n.pending=!1,n}return r(e,t),e.prototype.schedule=function(t,r){var e;if(void 0===r&&(r=0),this.closed)return this;this.state=t;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,r)),this.pending=!0,this.delay=r,this.id=null!==(e=this.id)&&void 0!==e?e:this.requestAsyncId(o,this.id,r),this},e.prototype.requestAsyncId=function(t,r,e){return void 0===e&&(e=0),m.setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,r,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return r;null!=r&&m.clearInterval(r)},e.prototype.execute=function(t,r){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,r);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,r){var e,n=!1;try{this.work(t)}catch(t){n=!0,e=t||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var r=this.id,e=this.scheduler,n=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(n,this),null!=r&&(this.id=this.recycleAsyncId(e,r,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(b),g={now:function(){return(g.delegate||Date).now()},delegate:void 0},x=function(){function t(r,e){void 0===e&&(e=t.now),this.schedulerActionCtor=r,this.now=e}return t.prototype.schedule=function(t,r,e){return void 0===r&&(r=0),new this.schedulerActionCtor(this,t).schedule(e,r)},t.now=g.now,t}(),S=new(function(t){function e(r,e){void 0===e&&(e=x.now);var n=t.call(this,r,e)||this;return n.actions=[],n._active=!1,n}return r(e,t),e.prototype.flush=function(t){var r=this.actions;if(this._active)r.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=r.shift());if(this._active=!1,e){for(;t=r.shift();)t.unsubscribe();throw e}}},e}(x))(w),O=S,T=null,j=null,E=void 0,P=!1,_=!1,L={setTimeout:function(t,r){for(var e=[],n=2;n<arguments.length;n++)e[n-2]=arguments[n];var o=L.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,a([t,r],u(e))):setTimeout.apply(void 0,a([t,r],u(e)))},clearTimeout:function(t){var r=L.delegate;return((null==r?void 0:r.clearTimeout)||clearTimeout)(t)},delegate:void 0};function A(t){L.setTimeout((function(){if(!T)throw t;T(t)}))}function I(){}var k=M("C",void 0,void 0);function M(t,r,e){return{kind:t,value:r,error:e}}var C=null,R=function(t){function e(r){var e=t.call(this)||this;return e.isStopped=!1,r?(e.destination=r,d(r)&&r.add(e)):e.destination=G,e}return r(e,t),e.create=function(t,r,e){return new H(t,r,e)},e.prototype.next=function(t){this.isStopped?U(function(t){return M("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?U(M("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?U(k,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(v),D=Function.prototype.bind;function F(t,r){return D.call(t,r)}var N=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var r=this.partialObserver;if(r.next)try{r.next(t)}catch(t){z(t)}},t.prototype.error=function(t){var r=this.partialObserver;if(r.error)try{r.error(t)}catch(t){z(t)}else z(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){z(t)}},t}(),H=function(t){function e(r,e,n){var o,i,u=t.call(this)||this;return l(r)||!r?o={next:null!=r?r:void 0,error:null!=e?e:void 0,complete:null!=n?n:void 0}:u&&_?((i=Object.create(r)).unsubscribe=function(){return u.unsubscribe()},o={next:r.next&&F(r.next,i),error:r.error&&F(r.error,i),complete:r.complete&&F(r.complete,i)}):o=r,u.destination=new N(o),u}return r(e,t),e}(R);function z(t){var r;P?(r=t,P&&C&&(C.errorThrown=!0,C.error=r)):A(t)}function U(t,r){var e=j;e&&L.setTimeout((function(){return e(t,r)}))}var G={closed:!0,next:I,error:function(t){throw t},complete:I},q="function"==typeof Symbol&&Symbol.observable||"@@observable";function V(t){return t}function B(t){return 0===t.length?V:1===t.length?t[0]:function(r){return t.reduce((function(t,r){return r(t)}),r)}}var X=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(r){var e=new t;return e.source=this,e.operator=r,e},t.prototype.subscribe=function(t,r,e){var n,o=this,i=(n=t)&&n instanceof R||function(t){return t&&l(t.next)&&l(t.error)&&l(t.complete)}(n)&&d(n)?t:new H(t,r,e);return function(t){if(P){var r=!C;if(r&&(C={errorThrown:!1,error:null}),t(),r){var e=C,n=e.errorThrown,o=e.error;if(C=null,n)throw o}}else t()}((function(){var t=o,r=t.operator,e=t.source;i.add(r?r.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(r){t.error(r)}},t.prototype.forEach=function(t,r){var e=this;return new(r=Y(r))((function(r,n){var o=new H({next:function(r){try{t(r)}catch(t){n(t),o.unsubscribe()}},error:n,complete:r});e.subscribe(o)}))},t.prototype._subscribe=function(t){var r;return null===(r=this.source)||void 0===r?void 0:r.subscribe(t)},t.prototype[q]=function(){return this},t.prototype.pipe=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return B(t)(this)},t.prototype.toPromise=function(t){var r=this;return new(t=Y(t))((function(t,e){var n;r.subscribe((function(t){return n=t}),(function(t){return e(t)}),(function(){return t(n)}))}))},t.create=function(r){return new t(r)},t}();function Y(t){var r;return null!==(r=null!=t?t:E)&&void 0!==r?r:Promise}var $="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function J(t){return new X((function(r){(function(t,r){var e,n,u,a,c,s,l,f;return c=this,s=void 0,f=function(){var c,s;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),e=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,e=t[Symbol.asyncIterator];return e?e.call(t):(t=i(t),r={},n("next"),n("throw"),n("return"),r[Symbol.asyncIterator]=function(){return this},r);function n(e){r[e]=t[e]&&function(r){return new Promise((function(n,o){!function(t,r,e,n){Promise.resolve(n).then((function(r){t({value:r,done:e})}),r)}(n,o,(r=t[e](r)).done,r.value)}))}}}(t),o.label=1;case 1:return[4,e.next()];case 2:if((n=o.sent()).done)return[3,4];if(c=n.value,r.next(c),r.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=o.sent(),u={error:s},[3,11];case 6:return o.trys.push([6,,9,10]),n&&!n.done&&(a=e.return)?[4,a.call(e)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return r.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,r){function e(t){try{o(f.next(t))}catch(t){r(t)}}function n(t){try{o(f.throw(t))}catch(t){r(t)}}function o(r){var o;r.done?t(r.value):(o=r.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,n)}o((f=f.apply(c,s||[])).next())}))})(t,r).catch((function(t){return r.error(t)}))}))}function W(t){return function(r){if(function(t){return l(null==t?void 0:t.lift)}(r))return r.lift((function(r){try{return t(r,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function K(t,r,e,n,o){return new Q(t,r,e,n,o)}var Q=function(t){function e(r,e,n,o,i,u){var a=t.call(this,r)||this;return a.onFinalize=i,a.shouldUnsubscribe=u,a._next=e?function(t){try{e(t)}catch(t){r.error(t)}}:t.prototype._next,a._error=o?function(t){try{o(t)}catch(t){r.error(t)}finally{this.unsubscribe()}}:t.prototype._error,a._complete=n?function(){try{n()}catch(t){r.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,a}return r(e,t),e.prototype.unsubscribe=function(){var r;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(r=this.onFinalize)||void 0===r||r.call(this))}},e}(R);function Z(t,r){return W((function(e,n){var o=0;e.subscribe(K(n,(function(e){n.next(t.call(r,e,o++))})))}))}function tt(t){switch(t.responseType){case"json":if("response"in t)return t.response;var r=t;return JSON.parse(r.responseText);case"document":return t.responseXML;default:return"response"in t?t.response:(r=t).responseText}}var rt=function(t,r,e,n){void 0===n&&(n="download_load"),this.originalEvent=t,this.xhr=r,this.request=e,this.type=n;var o=r.status,i=r.responseType;this.status=null!=o?o:0,this.responseType=null!=i?i:"";var u=r.getAllResponseHeaders();this.responseHeaders=u?u.split("\n").reduce((function(t,r){var e=r.indexOf(": ");return t[r.slice(0,e)]=r.slice(e+2),t}),{}):{},this.response=tt(r);var a=t.loaded,c=t.total;this.loaded=a,this.total=c},et=f((function(t){return function(t,r,e){var n;this.message=t,this.name="AjaxError",this.xhr=r,this.request=e,this.status=r.status,this.responseType=r.responseType;try{n=tt(r)}catch(t){n=r.responseText}this.response=n}})),nt=function(){function t(t,r){return et.call(this,"ajax timeout",t,r),this.name="AjaxTimeoutError",this}return t.prototype=Object.create(et.prototype),t}();var ot=Z((function(t){return t.response}));var it,ut=(it=function(t){var r;return r="string"==typeof t?{url:t}:t,new X((function(t){var e,o,i,u=n({async:!0,crossDomain:!1,withCredentials:!1,method:"GET",timeout:0,responseType:"json"},r),a=u.queryParams,c=u.body,s=u.headers,l=u.url;if(!l)throw new TypeError("url is required");if(a)if(l.includes("?")){var f=l.split("?");if(2<f.length)throw new TypeError("invalid url");i=new URLSearchParams(f[1]),new URLSearchParams(a).forEach((function(t,r){return i.set(r,t)})),l=f[0]+"?"+i}else l=l+"?"+(i=new URLSearchParams(a));var p={};if(s)for(var h in s)s.hasOwnProperty(h)&&(p[h.toLowerCase()]=s[h]);var v=u.crossDomain;v||"x-requested-with"in p||(p["x-requested-with"]="XMLHttpRequest");var d=u.withCredentials,y=u.xsrfCookieName,b=u.xsrfHeaderName;if((d||!v)&&y&&b){var m=null!==(o=null===(e=null===document||void 0===document?void 0:document.cookie.match(new RegExp("(^|;\\s*)("+y+")=([^;]*)")))||void 0===e?void 0:e.pop())&&void 0!==o?o:"";m&&(p[b]=m)}var w,g=function(t,r){var e;if(!t||"string"==typeof t||function(t){return"undefined"!=typeof FormData&&t instanceof FormData}(t)||function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams}(t)||function(t){return ht(t,"ArrayBuffer")}(t)||function(t){return ht(t,"File")}(t)||function(t){return ht(t,"Blob")}(t)||function(t){return"undefined"!=typeof ReadableStream&&t instanceof ReadableStream}(t))return t;if(function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView(t)}(t))return t.buffer;if("object"==typeof t)return r["content-type"]=null!==(e=r["content-type"])&&void 0!==e?e:"application/json;charset=utf-8",JSON.stringify(t);throw new TypeError("Unknown body type")}(c,p),x=n(n({},u),{url:l,headers:p,body:g});w=r.createXHR?r.createXHR():new XMLHttpRequest;var S=r.progressSubscriber,O=r.includeDownloadProgress,T=void 0!==O&&O,j=r.includeUploadProgress,E=void 0!==j&&j,P=function(r,e){w.addEventListener(r,(function(){var r,n=e();null===(r=null==S?void 0:S.error)||void 0===r||r.call(S,n),t.error(n)}))};P("timeout",(function(){return new nt(w,x)})),P("abort",(function(){return new et("aborted",w,x)}));var _=function(t,r){return new rt(r,w,x,t+"_"+r.type)},L=function(r,e,n){r.addEventListener(e,(function(r){t.next(_(n,r))}))};E&&[st,lt,ft].forEach((function(t){return L(w.upload,t,at)})),S&&[st,lt].forEach((function(t){return w.upload.addEventListener(t,(function(t){var r;return null===(r=null==S?void 0:S.next)||void 0===r?void 0:r.call(S,t)}))})),T&&[st,lt].forEach((function(t){return L(w,t,ct)}));var A=function(r){var e="ajax error"+(r?" "+r:"");t.error(new et(e,w,x))};w.addEventListener("error",(function(t){var r;null===(r=null==S?void 0:S.error)||void 0===r||r.call(S,t),A()})),w.addEventListener(ft,(function(r){var e,n,o=w.status;if(o<400){null===(e=null==S?void 0:S.complete)||void 0===e||e.call(S);var i=void 0;try{i=_(ct,r)}catch(r){return void t.error(r)}t.next(i),t.complete()}else null===(n=null==S?void 0:S.error)||void 0===n||n.call(S,r),A(o)}));var I=x.user,k=x.method,M=x.async;for(var h in I?w.open(k,l,M,I,x.password):w.open(k,l,M),M&&(w.timeout=x.timeout,w.responseType=x.responseType),"withCredentials"in w&&(w.withCredentials=x.withCredentials),p)p.hasOwnProperty(h)&&w.setRequestHeader(h,p[h]);return g?w.send(g):w.send(),function(){w&&4!==w.readyState&&w.abort()}}))},it.get=function(t,r){return ut({method:"GET",url:t,headers:r})},it.post=function(t,r,e){return ut({method:"POST",url:t,body:r,headers:e})},it.delete=function(t,r){return ut({method:"DELETE",url:t,headers:r})},it.put=function(t,r,e){return ut({method:"PUT",url:t,body:r,headers:e})},it.patch=function(t,r,e){return ut({method:"PATCH",url:t,body:r,headers:e})},it.getJSON=function(t,r){return ot(ut({method:"GET",url:t,headers:r}))},it),at="upload",ct="download",st="loadstart",lt="progress",ft="load",pt=Object.prototype.toString;function ht(t,r){return pt.call(t)==="[object "+r+"]"}function vt(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}e(2222);var dt=function(){function t(){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.list=document.querySelector(".messages_list")}var r,e;return r=t,(e=[{key:"render",value:function(t,r,e){this.email=t.length<=20?t:"".concat(t.substr(0,20),"..."),this.text=r.length<=15?r:"".concat(r.substr(0,15),"...");var n='\n    <div class="message">\n      <div class="contact">'.concat(t,'</div>\n      <div class="text">').concat(r,'</div>\n      <div class="timestamp">').concat(e,"</div>\n    </div>");this.list.insertAdjacentHTML("afterbegin",n)}}])&&vt(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),t}();function yt(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(new(function(){function t(){!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.message=new dt}var r,e;return r=t,(e=[{key:"stream",value:function(){var t,r,e,n=this;return this.newMsg$=ut.getJSON("https://asuch-rxjs.herokuapp.com/messages/unread"),(r=4e3,void 0===r&&(r=0),void 0===e&&(e=S),r<0&&(r=0),function(t,r,e){void 0===t&&(t=0),void 0===e&&(e=O);var n,o=-1;return null!=r&&((n=r)&&l(n.schedule)?e=r:o=r),new X((function(r){var n=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-e.now():t;n<0&&(n=0);var i=0;return e.schedule((function(){r.closed||(r.next(i++),0<=o?this.schedule(void 0,o):r.complete())}),n)}))}(r,r,e)).pipe((t=function(){return n.newMsg$},W((function(r,e){var n=null,u=!1,a=function(){return u&&!n&&e.complete()};r.subscribe(K(e,(function(r){null==n||n.unsubscribe();0;(function(t){if(t instanceof X)return t;if(null!=t){if(function(t){return l(t[q])}(t))return f=t,new X((function(t){var r=f[q]();if(l(r.subscribe))return r.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if((a=t)&&"number"==typeof a.length&&"function"!=typeof a)return u=t,new X((function(t){for(var r=0;r<u.length&&!t.closed;r++)t.next(u[r]);t.complete()}));if(l(null==(n=t)?void 0:n.then))return e=t,new X((function(t){e.then((function(r){t.closed||(t.next(r),t.complete())}),(function(r){return t.error(r)})).then(null,A)}));if(function(t){return Symbol.asyncIterator&&l(null==t?void 0:t[Symbol.asyncIterator])}(t))return J(t);if(function(t){return l(null==t?void 0:t[$])}(t))return r=t,new X((function(t){var e,n;try{for(var o=i(r),u=o.next();!u.done;u=o.next()){var a=u.value;if(t.next(a),t.closed)return}}catch(t){e={error:t}}finally{try{u&&!u.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}t.complete()}));if(function(t){return l(null==t?void 0:t.getReader)}(t))return J(function(t){return s(this,arguments,(function(){var r,e,n;return o(this,(function(o){switch(o.label){case 0:r=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,c(r.read())];case 3:return e=o.sent(),n=e.value,e.done?[4,c(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,c(n)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return r.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var r,e,n,u,a,f;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)})(t()).subscribe(n=K(e,(function(t){return e.next(t)}),(function(){n=null,a()})))}),(function(){u=!0,a()})))}))),Z((function(t){return t.messages})))}},{key:"init",value:function(){var t=this;this.stream$=this.stream(),this.stream$.subscribe((function(r){r.forEach((function(r){t.message.render(r.from,r.subject,r.received)}))}))}}])&&yt(r.prototype,e),Object.defineProperty(r,"prototype",{writable:!1}),t}())).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WyJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWFsbC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLXJhdy5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYWtlLWJ1aWx0LWluLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvaW50ZXJ2YWxQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9lcnJvckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2xpZnQuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2FqYXgvZ2V0WEhSUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvYWpheC9BamF4UmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvYWpheC9lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvYWpheC9hamF4LmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vc3JjL2pzL21lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9zcmMvanMvYXBwLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vc3JjL2pzL0FQSS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vcngtanNfZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lci5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNEYXRlLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9yeC1qc19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3J4LWpzX2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IoJFN0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICFTVFJJQ1RfTUVUSE9EID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1mb3JlYWNoIC0tIHNhZmVcbn0gOiBbXS5mb3JFYWNoO1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJSZWplY3QgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX1JFSkVDVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xuXG4vLyBhIHBhcnQgb2YgYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmIChpc0NvbnN0cnVjdG9yKEMpICYmIChDID09PSAkQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gJEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpc1JhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtcmF3Jyk7XG5cbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzUmF3KHt9LnRvU3RyaW5nKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzUmF3KCcnLnNsaWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHN0cmluZ1NsaWNlKHRvU3RyaW5nKGl0KSwgOCwgLTEpO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9ICRPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIGV4Y2VwdGlvbnMpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpICYmICEoZXhjZXB0aW9ucyAmJiBoYXNPd24oZXhjZXB0aW9ucywga2V5KSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMuZW51bWVyYWJsZTtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSBtYWtlQnVpbHRJbih2YWx1ZSwgbmFtZSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLmdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lR2xvYmFsUHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghb3B0aW9ucy51bnNhZmUpIGRlbGV0ZSBPW2tleV07XG4gICAgICBlbHNlIGlmIChPW2tleV0pIHNpbXBsZSA9IHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiAhb3B0aW9ucy5ub25Db25maWd1cmFibGUsXG4gICAgICB3cml0YWJsZTogIW9wdGlvbnMubm9uV3JpdGFibGVcbiAgICB9KTtcbiAgfSByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZG9jdW1lbnRBbGwgPSB0eXBlb2YgZG9jdW1lbnQgPT0gJ29iamVjdCcgJiYgZG9jdW1lbnQuYWxsO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90XG52YXIgSVNfSFRNTEREQSA9IHR5cGVvZiBkb2N1bWVudEFsbCA9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudEFsbCAhPT0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWxsOiBkb2N1bWVudEFsbCxcbiAgSVNfSFRNTEREQTogSVNfSFRNTEREQVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgJFR5cGVFcnJvcignTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAgICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGJpbmQgPSB1bmN1cnJ5VGhpcyh1bmN1cnJ5VGhpcy5iaW5kKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCkge1xuICBhQ2FsbGFibGUoZm4pO1xuICByZXR1cm4gdGhhdCA9PT0gdW5kZWZpbmVkID8gZm4gOiBOQVRJVkVfQklORCA/IGJpbmQoZm4sIHRoYXQpIDogZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZnVuY3Rpb24tcHJvdG90eXBlLWJpbmQgLS0gc2FmZVxuICB2YXIgdGVzdCA9IChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pLmJpbmQoKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiB0eXBlb2YgdGVzdCAhPSAnZnVuY3Rpb24nIHx8IHRlc3QuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZScpO1xufSk7XG4iLCJ2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGNhbGwuYmluZChjYWxsKSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0RGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBFWElTVFMgPSBoYXNPd24oRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJyk7XG4vLyBhZGRpdGlvbmFsIHByb3RlY3Rpb24gZnJvbSBtaW5pZmllZCAvIG1hbmdsZWQgLyBkcm9wcGVkIGZ1bmN0aW9uIG5hbWVzXG52YXIgUFJPUEVSID0gRVhJU1RTICYmIChmdW5jdGlvbiBzb21ldGhpbmcoKSB7IC8qIGVtcHR5ICovIH0pLm5hbWUgPT09ICdzb21ldGhpbmcnO1xudmFyIENPTkZJR1VSQUJMRSA9IEVYSVNUUyAmJiAoIURFU0NSSVBUT1JTIHx8IChERVNDUklQVE9SUyAmJiBnZXREZXNjcmlwdG9yKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpLmNvbmZpZ3VyYWJsZSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRVhJU1RTOiBFWElTVFMsXG4gIFBST1BFUjogUFJPUEVSLFxuICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRVxufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG52YXIgdW5jdXJyeVRoaXNXaXRoQmluZCA9IE5BVElWRV9CSU5EICYmIEZ1bmN0aW9uUHJvdG90eXBlLmJpbmQuYmluZChjYWxsLCBjYWxsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IHVuY3VycnlUaGlzV2l0aEJpbmQgOiBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbC5hcHBseShmbiwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHVuY3VycnlUaGlzUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1yYXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgLy8gTmFzaG9ybiBidWc6XG4gIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMjhcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEzMFxuICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpc1Jhdyhmbik7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoYXJndW1lbnQpID8gYXJndW1lbnQgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pIDogZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCJ2YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChWLCBQKSB7XG4gIHZhciBmdW5jID0gVltQXTtcbiAgcmV0dXJuIGlzTnVsbE9yVW5kZWZpbmVkKGZ1bmMpID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTtcblxuLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaGFzb3duIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmtzIHRvIElFOCBmb3IgaXRzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICEkT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdChpdCwgJycpIDogJE9iamVjdChpdCk7XG59IDogJE9iamVjdDtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24nKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqL1xuICBzdG9yZS5nZXQgPSBzdG9yZS5nZXQ7XG4gIHN0b3JlLmhhcyA9IHN0b3JlLmhhcztcbiAgc3RvcmUuc2V0ID0gc3RvcmUuc2V0O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChzdG9yZS5oYXMoaXQpKSB0aHJvdyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHN0b3JlLnNldChpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldChpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBzdG9yZS5oYXMoaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoaGFzT3duKGl0LCBTVEFURSkpIHRocm93IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmd1bWVudCkge1xuICByZXR1cm4gY2xhc3NvZihhcmd1bWVudCkgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgJGRvY3VtZW50QWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWFsbCcpO1xuXG52YXIgZG9jdW1lbnRBbGwgPSAkZG9jdW1lbnRBbGwuYWxsO1xuXG4vLyBgSXNDYWxsYWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nIHx8IGFyZ3VtZW50ID09PSBkb2N1bWVudEFsbDtcbn0gOiBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgZW1wdHkgPSBbXTtcbnZhciBjb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIGNvbnN0cnVjdG9yUmVnRXhwID0gL15cXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY29uc3RydWN0b3JSZWdFeHAuZXhlYyk7XG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKG5vb3ApO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0cnVjdChub29wLCBlbXB0eSwgYXJndW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lc1xuICAgIC8vIChmb3IgZXhhbXBsZSwgYERPTVF1YWRgIGFuZCBzaW1pbGFyIGluIEZGNDEtKVxuICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyhjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5pc0NvbnN0cnVjdG9yTGVnYWN5LnNoYW0gPSB0cnVlO1xuXG4vLyBgSXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsZWQ7XG4gIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlOyB9KVxuICAgIHx8IGNhbGxlZDtcbn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCIvLyB3ZSBjYW4ndCB1c2UganVzdCBgaXQgPT0gbnVsbGAgc2luY2Ugb2YgYGRvY3VtZW50LmFsbGAgc3BlY2lhbCBjYXNlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90LWFlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSBudWxsIHx8IGl0ID09PSB1bmRlZmluZWQ7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciAkZG9jdW1lbnRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsJyk7XG5cbnZhciBkb2N1bWVudEFsbCA9ICRkb2N1bWVudEFsbC5hbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCkgfHwgaXQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsICRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBDT05GSUdVUkFCTEVfTEVOR1RIID0gREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDggfSkubGVuZ3RoICE9PSA4O1xufSk7XG5cbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxudmFyIG1ha2VCdWlsdEluID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKFN0cmluZyhuYW1lKS5zbGljZSgwLCA3KSA9PT0gJ1N5bWJvbCgnKSB7XG4gICAgbmFtZSA9ICdbJyArIFN0cmluZyhuYW1lKS5yZXBsYWNlKC9eU3ltYm9sXFwoKFteKV0qKVxcKS8sICckMScpICsgJ10nO1xuICB9XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2V0dGVyKSBuYW1lID0gJ2dldCAnICsgbmFtZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXR0ZXIpIG5hbWUgPSAnc2V0ICcgKyBuYW1lO1xuICBpZiAoIWhhc093bih2YWx1ZSwgJ25hbWUnKSB8fCAoQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgJiYgdmFsdWUubmFtZSAhPT0gbmFtZSkpIHtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIHsgdmFsdWU6IG5hbWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICBlbHNlIHZhbHVlLm5hbWUgPSBuYW1lO1xuICB9XG4gIGlmIChDT05GSUdVUkFCTEVfTEVOR1RIICYmIG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsICdhcml0eScpICYmIHZhbHVlLmxlbmd0aCAhPT0gb3B0aW9ucy5hcml0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KHZhbHVlLCAnbGVuZ3RoJywgeyB2YWx1ZTogb3B0aW9ucy5hcml0eSB9KTtcbiAgfVxuICB0cnkge1xuICAgIGlmIChvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnY29uc3RydWN0b3InKSAmJiBvcHRpb25zLmNvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KHZhbHVlLCAncHJvdG90eXBlJywgeyB3cml0YWJsZTogZmFsc2UgfSk7XG4gICAgLy8gaW4gVjggfiBDaHJvbWUgNTMsIHByb3RvdHlwZXMgb2Ygc29tZSBtZXRob2RzLCBsaWtlIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCwgYXJlIG5vbi13cml0YWJsZVxuICAgIH0gZWxzZSBpZiAodmFsdWUucHJvdG90eXBlKSB2YWx1ZS5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICBpZiAoIWhhc093bihzdGF0ZSwgJ3NvdXJjZScpKSB7XG4gICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcblxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0ZW5kLW5hdGl2ZSAtLSByZXF1aXJlZFxuRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gbWFrZUJ1aWx0SW4oZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59LCAndG9TdHJpbmcnKTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYE1hdGgudHJ1bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC10cnVuYyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgudHJ1bmMgfHwgZnVuY3Rpb24gdHJ1bmMoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gKG4gPiAwID8gZmxvb3IgOiBjZWlsKShuKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoe30uaXNQcm90b3R5cGVPZik7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093bihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChpc0NhbGxhYmxlKGZuID0gaW5wdXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChrZXlzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc051bGxPclVuZGVmaW5lZChpdCkpIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjI2LjAnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMiBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjI2LjAvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgdHJ1bmMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC10cnVuYycpO1xuXG4vLyBgVG9JbnRlZ2VyT3JJbmZpbml0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlcm9yaW5maW5pdHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBudW1iZXIgPSArYXJndW1lbnQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiBudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09IDAgPyAwIDogdHJ1bmMobnVtYmVyKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiAkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGV4b3RpY1RvUHJpbSA9IGdldE1ldGhvZChpbnB1dCwgVE9fUFJJTUlUSVZFKTtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKGV4b3RpY1RvUHJpbSkge1xuICAgIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnZGVmYXVsdCc7XG4gICAgcmVzdWx0ID0gY2FsbChleG90aWNUb1ByaW0sIGlucHV0LCBwcmVmKTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICB0aHJvdyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsInZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBWOCB+IENocm9tZSAzNi1cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMzMzRcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywge1xuICAgIHZhbHVlOiA0MixcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSkucHJvdG90eXBlICE9IDQyO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChTdHJpbmcoV2Vha01hcCkpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBzeW1ib2xGb3IgPSBTeW1ib2wgJiYgU3ltYm9sWydmb3InXTtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wgfHwgdHlwZW9mIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9PSAnc3RyaW5nJykpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAnU3ltYm9sLicgKyBuYW1lO1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhc093bihTeW1ib2wsIG5hbWUpKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgfSBlbHNlIGlmIChVU0VfU1lNQk9MX0FTX1VJRCAmJiBzeW1ib2xGb3IpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IHN5bWJvbEZvcihkZXNjcmlwdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgfVxuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9lcy1ub3QtZXhjZWVkLXNhZmUtaW50ZWdlcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbi8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgYXJyYXlbSVNfQ09OQ0FUX1NQUkVBREFCTEVdID0gZmFsc2U7XG4gIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG59KTtcblxudmFyIFNQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2NvbmNhdCcpO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGFyaXR5OiAxLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KGFyZykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShFKTtcbiAgICAgICAgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKG4gKyBsZW4pO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobiArIDEpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1mb3JlYWNoIC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFtdLmZvckVhY2ggIT0gZm9yRWFjaCB9LCB7XG4gIGZvckVhY2g6IGZvckVhY2hcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09IGRlZmluZVByb3BlcnR5LCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHlcbn0pO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICBkZWZpbmVCdWlsdEluKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIGhhbmRsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIHtcbiAgICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlKTtcbiAgfVxufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckNsYXNzKGNyZWF0ZUltcGwpIHtcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH07XG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcbiAgICByZXR1cm4gY3RvckZ1bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEZpbmFsaXplciA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbEZpbmFsaXplcikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmluYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl9maW5hbGl6ZXJzID0gKF9hID0gdGhpcy5fZmluYWxpemVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgIF9maW5hbGl6ZXJzICYmIGFyclJlbW92ZShfZmluYWxpemVycywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmaW5hbGl6ZXIpKSB7XG4gICAgICAgIGZpbmFsaXplcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZmluYWxpemVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbnZhciBBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB9XG4gICAgQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgaW50ZXJ2YWxQcm92aWRlciA9IHtcbiAgICBzZXRJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldEludGVydmFsLmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJJbnRlcnZhbCkgfHwgY2xlYXJJbnRlcnZhbCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWxQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vQWN0aW9uJztcbmltcG9ydCB7IGludGVydmFsUHJvdmlkZXIgfSBmcm9tICcuL2ludGVydmFsUHJvdmlkZXInO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIEFzeW5jQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgX3RoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuaWQgPSAoX2EgPSB0aGlzLmlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgdGhpcy5pZCwgZGVsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIF9pZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiBpbnRlcnZhbFByb3ZpZGVyLnNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChfc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5ICYmIHRoaXMucGVuZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW50ZXJ2YWxQcm92aWRlci5jbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgX2RlbGF5KSB7XG4gICAgICAgIHZhciBlcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvclZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53b3JrKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICBlcnJvclZhbHVlID0gZSA/IGUgOiBuZXcgRXJyb3IoJ1NjaGVkdWxlZCBhY3Rpb24gdGhyZXcgZmFsc3kgZXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JlZCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yVmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgaWQgPSBfYS5pZCwgc2NoZWR1bGVyID0gX2Euc2NoZWR1bGVyO1xuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgICAgIHRoaXMud29yayA9IHRoaXMuc3RhdGUgPSB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGFyclJlbW92ZShhY3Rpb25zLCB0aGlzKTtcbiAgICAgICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlbGF5ID0gbnVsbDtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jQWN0aW9uO1xufShBY3Rpb24pKTtcbmV4cG9ydCB7IEFzeW5jQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY0FjdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGRhdGVUaW1lc3RhbXBQcm92aWRlciA9IHtcbiAgICBub3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChkYXRlVGltZXN0YW1wUHJvdmlkZXIuZGVsZWdhdGUgfHwgRGF0ZSkubm93KCk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGVUaW1lc3RhbXBQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBkYXRlVGltZXN0YW1wUHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXInO1xudmFyIFNjaGVkdWxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NoZWR1bGVyKHNjaGVkdWxlckFjdGlvbkN0b3IsIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHsgbm93ID0gU2NoZWR1bGVyLm5vdzsgfVxuICAgICAgICB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IgPSBzY2hlZHVsZXJBY3Rpb25DdG9yO1xuICAgICAgICB0aGlzLm5vdyA9IG5vdztcbiAgICB9XG4gICAgU2NoZWR1bGVyLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICh3b3JrLCBkZWxheSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiBuZXcgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yKHRoaXMsIHdvcmspLnNjaGVkdWxlKHN0YXRlLCBkZWxheSk7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIubm93ID0gZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLm5vdztcbiAgICByZXR1cm4gU2NoZWR1bGVyO1xufSgpKTtcbmV4cG9ydCB7IFNjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhc3luY1NjaGVkdWxlciA9IG5ldyBBc3luY1NjaGVkdWxlcihBc3luY0FjdGlvbik7XG5leHBvcnQgdmFyIGFzeW5jID0gYXN5bmNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4uL1NjaGVkdWxlcic7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHsgbm93ID0gU2NoZWR1bGVyLm5vdzsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIG5vdykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcbn0oU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBc3luY1NjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwIiwiZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgb25VbmhhbmRsZWRFcnJvcjogbnVsbCxcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb246IG51bGwsXG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxuICAgIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc6IGZhbHNlLFxuICAgIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogZmFsc2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciB0aW1lb3V0UHJvdmlkZXIgPSB7XG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRUaW1lb3V0LmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJUaW1lb3V0KSB8fCBjbGVhclRpbWVvdXQpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyKSB7XG4gICAgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb25VbmhhbmRsZWRFcnJvciA9IGNvbmZpZy5vblVuaGFuZGxlZEVycm9yO1xuICAgICAgICBpZiAob25VbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgICAgb25VbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBvcnRVbmhhbmRsZWRFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXAiLCJleHBvcnQgdmFyIENPTVBMRVRFX05PVElGSUNBVElPTiA9IChmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0MnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7IH0pKCk7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JOb3RpZmljYXRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnJvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gbmV4dE5vdGlmaWNhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xudmFyIGNvbnRleHQgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yQ29udGV4dChjYikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICB2YXIgaXNSb290ID0gIWNvbnRleHQ7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB7IGVycm9yVGhyb3duOiBmYWxzZSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBjb250ZXh0LCBlcnJvclRocm93biA9IF9hLmVycm9yVGhyb3duLCBlcnJvciA9IF9hLmVycm9yO1xuICAgICAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2IoKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZUVycm9yKGVycikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiBjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICBjb250ZXh0LmVycm9yID0gZXJyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbC9ub29wJztcbmltcG9ydCB7IG5leHROb3RpZmljYXRpb24sIGVycm9yTm90aWZpY2F0aW9uLCBDT01QTEVURV9OT1RJRklDQVRJT04gfSBmcm9tICcuL05vdGlmaWNhdGlvbkZhY3Rvcmllcyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuaW1wb3J0IHsgY2FwdHVyZUVycm9yIH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uKGRlc3RpbmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IEVNUFRZX09CU0VSVkVSO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2FmZVN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5leHROb3RpZmljYXRpb24odmFsdWUpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKGVycm9yTm90aWZpY2F0aW9uKGVyciksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihDT01QTEVURV9OT1RJRklDQVRJT04sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBfYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBfYmluZC5jYWxsKGZuLCB0aGlzQXJnKTtcbn1cbnZhciBDb25zdW1lck9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcikge1xuICAgICAgICB0aGlzLnBhcnRpYWxPYnNlcnZlciA9IHBhcnRpYWxPYnNlcnZlcjtcbiAgICB9XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29uc3VtZXJPYnNlcnZlcjtcbn0oKSk7XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSB8fCAhb2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICBuZXh0OiAob2JzZXJ2ZXJPck5leHQgIT09IG51bGwgJiYgb2JzZXJ2ZXJPck5leHQgIT09IHZvaWQgMCA/IG9ic2VydmVyT3JOZXh0IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMTtcbiAgICAgICAgICAgIGlmIChfdGhpcyAmJiBjb25maWcudXNlRGVwcmVjYXRlZE5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuY29tcGxldGUsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNhZmVTdWJzY3JpYmVyIH07XG5mdW5jdGlvbiBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICBjYXB0dXJlRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyKSB7XG4gICAgdGhyb3cgZXJyO1xufVxuZnVuY3Rpb24gaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgb25TdG9wcGVkTm90aWZpY2F0aW9uID0gY29uZmlnLm9uU3RvcHBlZE5vdGlmaWNhdGlvbjtcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb24gJiYgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gb25TdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcik7IH0pO1xufVxuZXhwb3J0IHZhciBFTVBUWV9PQlNFUlZFUiA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogbm9vcCxcbiAgICBlcnJvcjogZGVmYXVsdEVycm9ySGFuZGxlcixcbiAgICBjb21wbGV0ZTogbm9vcCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsImV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsImltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cnlTdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xuICAgIHZhciBlXzIsIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFswLCA1LCA2LCAxMV0pO1xuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGFzeW5jSXRlcmFibGVfMS5uZXh0KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0l0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX2EuY2FsbChhc3luY0l0ZXJhYmxlXzEpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5uZXJGcm9tLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xufVxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0WEhSUmVzcG9uc2UoeGhyKSB7XG4gICAgc3dpdGNoICh4aHIucmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIGNhc2UgJ2pzb24nOiB7XG4gICAgICAgICAgICBpZiAoJ3Jlc3BvbnNlJyBpbiB4aHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGllWEhSID0geGhyO1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGllWEhSLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVhNTDtcbiAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGlmICgncmVzcG9uc2UnIGluIHhocikge1xuICAgICAgICAgICAgICAgIHJldHVybiB4aHIucmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaWVYSFIgPSB4aHI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGllWEhSLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFhIUlJlc3BvbnNlLmpzLm1hcCIsImltcG9ydCB7IGdldFhIUlJlc3BvbnNlIH0gZnJvbSAnLi9nZXRYSFJSZXNwb25zZSc7XG52YXIgQWpheFJlc3BvbnNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBamF4UmVzcG9uc2Uob3JpZ2luYWxFdmVudCwgeGhyLCByZXF1ZXN0LCB0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSB2b2lkIDApIHsgdHlwZSA9ICdkb3dubG9hZF9sb2FkJzsgfVxuICAgICAgICB0aGlzLm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgICAgICB0aGlzLnhociA9IHhocjtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMsIHJlc3BvbnNlVHlwZSA9IHhoci5yZXNwb25zZVR5cGU7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzICE9PSBudWxsICYmIHN0YXR1cyAhPT0gdm9pZCAwID8gc3RhdHVzIDogMDtcbiAgICAgICAgdGhpcy5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgIT09IG51bGwgJiYgcmVzcG9uc2VUeXBlICE9PSB2b2lkIDAgPyByZXNwb25zZVR5cGUgOiAnJztcbiAgICAgICAgdmFyIGFsbEhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7XG4gICAgICAgIHRoaXMucmVzcG9uc2VIZWFkZXJzID0gYWxsSGVhZGVyc1xuICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgIGFsbEhlYWRlcnMuc3BsaXQoJ1xcbicpLnJlZHVjZShmdW5jdGlvbiAoaGVhZGVycywgbGluZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBsaW5lLmluZGV4T2YoJzogJyk7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbGluZS5zbGljZSgwLCBpbmRleCldID0gbGluZS5zbGljZShpbmRleCArIDIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVhZGVycztcbiAgICAgICAgICAgICAgICB9LCB7fSlcbiAgICAgICAgICAgIDoge307XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSBnZXRYSFJSZXNwb25zZSh4aHIpO1xuICAgICAgICB2YXIgbG9hZGVkID0gb3JpZ2luYWxFdmVudC5sb2FkZWQsIHRvdGFsID0gb3JpZ2luYWxFdmVudC50b3RhbDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBsb2FkZWQ7XG4gICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDtcbiAgICB9XG4gICAgcmV0dXJuIEFqYXhSZXNwb25zZTtcbn0oKSk7XG5leHBvcnQgeyBBamF4UmVzcG9uc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFqYXhSZXNwb25zZS5qcy5tYXAiLCJpbXBvcnQgeyBnZXRYSFJSZXNwb25zZSB9IGZyb20gJy4vZ2V0WEhSUmVzcG9uc2UnO1xuaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4uL3V0aWwvY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIEFqYXhFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBBamF4RXJyb3JJbXBsKG1lc3NhZ2UsIHhociwgcmVxdWVzdCkge1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQWpheEVycm9yJztcbiAgICAgICAgdGhpcy54aHIgPSB4aHI7XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICAgIHRoaXMuc3RhdHVzID0geGhyLnN0YXR1cztcbiAgICAgICAgdGhpcy5yZXNwb25zZVR5cGUgPSB4aHIucmVzcG9uc2VUeXBlO1xuICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGdldFhIUlJlc3BvbnNlKHhocik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB9O1xufSk7XG5leHBvcnQgdmFyIEFqYXhUaW1lb3V0RXJyb3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFqYXhUaW1lb3V0RXJyb3JJbXBsKHhociwgcmVxdWVzdCkge1xuICAgICAgICBBamF4RXJyb3IuY2FsbCh0aGlzLCAnYWpheCB0aW1lb3V0JywgeGhyLCByZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0FqYXhUaW1lb3V0RXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgQWpheFRpbWVvdXRFcnJvckltcGwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShBamF4RXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gQWpheFRpbWVvdXRFcnJvckltcGw7XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IEFqYXhSZXNwb25zZSB9IGZyb20gJy4vQWpheFJlc3BvbnNlJztcbmltcG9ydCB7IEFqYXhUaW1lb3V0RXJyb3IsIEFqYXhFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcbmZ1bmN0aW9uIGFqYXhHZXQodXJsLCBoZWFkZXJzKSB7XG4gICAgcmV0dXJuIGFqYXgoeyBtZXRob2Q6ICdHRVQnLCB1cmw6IHVybCwgaGVhZGVyczogaGVhZGVycyB9KTtcbn1cbmZ1bmN0aW9uIGFqYXhQb3N0KHVybCwgYm9keSwgaGVhZGVycykge1xuICAgIHJldHVybiBhamF4KHsgbWV0aG9kOiAnUE9TVCcsIHVybDogdXJsLCBib2R5OiBib2R5LCBoZWFkZXJzOiBoZWFkZXJzIH0pO1xufVxuZnVuY3Rpb24gYWpheERlbGV0ZSh1cmwsIGhlYWRlcnMpIHtcbiAgICByZXR1cm4gYWpheCh7IG1ldGhvZDogJ0RFTEVURScsIHVybDogdXJsLCBoZWFkZXJzOiBoZWFkZXJzIH0pO1xufVxuZnVuY3Rpb24gYWpheFB1dCh1cmwsIGJvZHksIGhlYWRlcnMpIHtcbiAgICByZXR1cm4gYWpheCh7IG1ldGhvZDogJ1BVVCcsIHVybDogdXJsLCBib2R5OiBib2R5LCBoZWFkZXJzOiBoZWFkZXJzIH0pO1xufVxuZnVuY3Rpb24gYWpheFBhdGNoKHVybCwgYm9keSwgaGVhZGVycykge1xuICAgIHJldHVybiBhamF4KHsgbWV0aG9kOiAnUEFUQ0gnLCB1cmw6IHVybCwgYm9keTogYm9keSwgaGVhZGVyczogaGVhZGVycyB9KTtcbn1cbnZhciBtYXBSZXNwb25zZSA9IG1hcChmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5yZXNwb25zZTsgfSk7XG5mdW5jdGlvbiBhamF4R2V0SlNPTih1cmwsIGhlYWRlcnMpIHtcbiAgICByZXR1cm4gbWFwUmVzcG9uc2UoYWpheCh7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgIH0pKTtcbn1cbmV4cG9ydCB2YXIgYWpheCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNyZWF0ZSA9IGZ1bmN0aW9uICh1cmxPckNvbmZpZykge1xuICAgICAgICB2YXIgY29uZmlnID0gdHlwZW9mIHVybE9yQ29uZmlnID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgdXJsOiB1cmxPckNvbmZpZyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdXJsT3JDb25maWc7XG4gICAgICAgIHJldHVybiBmcm9tQWpheChjb25maWcpO1xuICAgIH07XG4gICAgY3JlYXRlLmdldCA9IGFqYXhHZXQ7XG4gICAgY3JlYXRlLnBvc3QgPSBhamF4UG9zdDtcbiAgICBjcmVhdGUuZGVsZXRlID0gYWpheERlbGV0ZTtcbiAgICBjcmVhdGUucHV0ID0gYWpheFB1dDtcbiAgICBjcmVhdGUucGF0Y2ggPSBhamF4UGF0Y2g7XG4gICAgY3JlYXRlLmdldEpTT04gPSBhamF4R2V0SlNPTjtcbiAgICByZXR1cm4gY3JlYXRlO1xufSkoKTtcbnZhciBVUExPQUQgPSAndXBsb2FkJztcbnZhciBET1dOTE9BRCA9ICdkb3dubG9hZCc7XG52YXIgTE9BRFNUQVJUID0gJ2xvYWRzdGFydCc7XG52YXIgUFJPR1JFU1MgPSAncHJvZ3Jlc3MnO1xudmFyIExPQUQgPSAnbG9hZCc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFqYXgoaW5pdCkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIGNvbmZpZyA9IF9fYXNzaWduKHsgYXN5bmM6IHRydWUsIGNyb3NzRG9tYWluOiBmYWxzZSwgd2l0aENyZWRlbnRpYWxzOiBmYWxzZSwgbWV0aG9kOiAnR0VUJywgdGltZW91dDogMCwgcmVzcG9uc2VUeXBlOiAnanNvbicgfSwgaW5pdCk7XG4gICAgICAgIHZhciBxdWVyeVBhcmFtcyA9IGNvbmZpZy5xdWVyeVBhcmFtcywgY29uZmlndXJlZEJvZHkgPSBjb25maWcuYm9keSwgY29uZmlndXJlZEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICAgICAgdmFyIHVybCA9IGNvbmZpZy51cmw7XG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1cmwgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVlcnlQYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBzZWFyY2hQYXJhbXNfMTtcbiAgICAgICAgICAgIGlmICh1cmwuaW5jbHVkZXMoJz8nKSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IHVybC5zcGxpdCgnPycpO1xuICAgICAgICAgICAgICAgIGlmICgyIDwgcGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgdXJsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtc18xID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJ0c1sxXSk7XG4gICAgICAgICAgICAgICAgbmV3IFVSTFNlYXJjaFBhcmFtcyhxdWVyeVBhcmFtcykuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gc2VhcmNoUGFyYW1zXzEuc2V0KGtleSwgdmFsdWUpOyB9KTtcbiAgICAgICAgICAgICAgICB1cmwgPSBwYXJ0c1swXSArICc/JyArIHNlYXJjaFBhcmFtc18xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1zXzEgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwgKyAnPycgKyBzZWFyY2hQYXJhbXNfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgICAgICBpZiAoY29uZmlndXJlZEhlYWRlcnMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb25maWd1cmVkSGVhZGVycykge1xuICAgICAgICAgICAgICAgIGlmIChjb25maWd1cmVkSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gY29uZmlndXJlZEhlYWRlcnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNyb3NzRG9tYWluID0gY29uZmlnLmNyb3NzRG9tYWluO1xuICAgICAgICBpZiAoIWNyb3NzRG9tYWluICYmICEoJ3gtcmVxdWVzdGVkLXdpdGgnIGluIGhlYWRlcnMpKSB7XG4gICAgICAgICAgICBoZWFkZXJzWyd4LXJlcXVlc3RlZC13aXRoJ10gPSAnWE1MSHR0cFJlcXVlc3QnO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3aXRoQ3JlZGVudGlhbHMgPSBjb25maWcud2l0aENyZWRlbnRpYWxzLCB4c3JmQ29va2llTmFtZSA9IGNvbmZpZy54c3JmQ29va2llTmFtZSwgeHNyZkhlYWRlck5hbWUgPSBjb25maWcueHNyZkhlYWRlck5hbWU7XG4gICAgICAgIGlmICgod2l0aENyZWRlbnRpYWxzIHx8ICFjcm9zc0RvbWFpbikgJiYgeHNyZkNvb2tpZU5hbWUgJiYgeHNyZkhlYWRlck5hbWUpIHtcbiAgICAgICAgICAgIHZhciB4c3JmQ29va2llID0gKF9iID0gKF9hID0gZG9jdW1lbnQgPT09IG51bGwgfHwgZG9jdW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKFwiKF58O1xcXFxzKikoXCIgKyB4c3JmQ29va2llTmFtZSArIFwiKT0oW147XSopXCIpKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBvcCgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcbiAgICAgICAgICAgIGlmICh4c3JmQ29va2llKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1t4c3JmSGVhZGVyTmFtZV0gPSB4c3JmQ29va2llO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBib2R5ID0gZXh0cmFjdENvbnRlbnRUeXBlQW5kTWF5YmVTZXJpYWxpemVCb2R5KGNvbmZpZ3VyZWRCb2R5LCBoZWFkZXJzKTtcbiAgICAgICAgdmFyIF9yZXF1ZXN0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGNvbmZpZyksIHsgdXJsOiB1cmwsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogYm9keSB9KTtcbiAgICAgICAgdmFyIHhocjtcbiAgICAgICAgeGhyID0gaW5pdC5jcmVhdGVYSFIgPyBpbml0LmNyZWF0ZVhIUigpIDogbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmVzc1N1YnNjcmliZXJfMSA9IGluaXQucHJvZ3Jlc3NTdWJzY3JpYmVyLCBfYyA9IGluaXQuaW5jbHVkZURvd25sb2FkUHJvZ3Jlc3MsIGluY2x1ZGVEb3dubG9hZFByb2dyZXNzID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2MsIF9kID0gaW5pdC5pbmNsdWRlVXBsb2FkUHJvZ3Jlc3MsIGluY2x1ZGVVcGxvYWRQcm9ncmVzcyA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kO1xuICAgICAgICAgICAgdmFyIGFkZEVycm9yRXZlbnQgPSBmdW5jdGlvbiAodHlwZSwgZXJyb3JGYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGVycm9yRmFjdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gbnVsbCB8fCBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvZ3Jlc3NTdWJzY3JpYmVyXzEuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHByb2dyZXNzU3Vic2NyaWJlcl8xLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhZGRFcnJvckV2ZW50KCd0aW1lb3V0JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFqYXhUaW1lb3V0RXJyb3IoeGhyLCBfcmVxdWVzdCk7IH0pO1xuICAgICAgICAgICAgYWRkRXJyb3JFdmVudCgnYWJvcnQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQWpheEVycm9yKCdhYm9ydGVkJywgeGhyLCBfcmVxdWVzdCk7IH0pO1xuICAgICAgICAgICAgdmFyIGNyZWF0ZVJlc3BvbnNlXzEgPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBldmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWpheFJlc3BvbnNlKGV2ZW50LCB4aHIsIF9yZXF1ZXN0LCBkaXJlY3Rpb24gKyBcIl9cIiArIGV2ZW50LnR5cGUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBhZGRQcm9ncmVzc0V2ZW50XzEgPSBmdW5jdGlvbiAodGFyZ2V0LCB0eXBlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChjcmVhdGVSZXNwb25zZV8xKGRpcmVjdGlvbiwgZXZlbnQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5jbHVkZVVwbG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgW0xPQURTVEFSVCwgUFJPR1JFU1MsIExPQURdLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIGFkZFByb2dyZXNzRXZlbnRfMSh4aHIudXBsb2FkLCB0eXBlLCBVUExPQUQpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9ncmVzc1N1YnNjcmliZXJfMSkge1xuICAgICAgICAgICAgICAgIFtMT0FEU1RBUlQsIFBST0dSRVNTXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7IHJldHVybiB4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuY3Rpb24gKGUpIHsgdmFyIF9hOyByZXR1cm4gKF9hID0gcHJvZ3Jlc3NTdWJzY3JpYmVyXzEgPT09IG51bGwgfHwgcHJvZ3Jlc3NTdWJzY3JpYmVyXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2dyZXNzU3Vic2NyaWJlcl8xLm5leHQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHByb2dyZXNzU3Vic2NyaWJlcl8xLCBlKTsgfSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVEb3dubG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgW0xPQURTVEFSVCwgUFJPR1JFU1NdLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIGFkZFByb2dyZXNzRXZlbnRfMSh4aHIsIHR5cGUsIERPV05MT0FEKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW1pdEVycm9yXzEgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9ICdhamF4IGVycm9yJyArIChzdGF0dXMgPyAnICcgKyBzdGF0dXMgOiAnJyk7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IobmV3IEFqYXhFcnJvcihtc2csIHhociwgX3JlcXVlc3QpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gbnVsbCB8fCBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvZ3Jlc3NTdWJzY3JpYmVyXzEuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHByb2dyZXNzU3Vic2NyaWJlcl8xLCBlKTtcbiAgICAgICAgICAgICAgICBlbWl0RXJyb3JfMSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihMT0FELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPCA0MDApIHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gcHJvZ3Jlc3NTdWJzY3JpYmVyXzEgPT09IG51bGwgfHwgcHJvZ3Jlc3NTdWJzY3JpYmVyXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2dyZXNzU3Vic2NyaWJlcl8xLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChwcm9ncmVzc1N1YnNjcmliZXJfMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gY3JlYXRlUmVzcG9uc2VfMShET1dOTE9BRCwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAoX2IgPSBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gbnVsbCB8fCBwcm9ncmVzc1N1YnNjcmliZXJfMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvZ3Jlc3NTdWJzY3JpYmVyXzEuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKHByb2dyZXNzU3Vic2NyaWJlcl8xLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGVtaXRFcnJvcl8xKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZXIgPSBfcmVxdWVzdC51c2VyLCBtZXRob2QgPSBfcmVxdWVzdC5tZXRob2QsIGFzeW5jID0gX3JlcXVlc3QuYXN5bmM7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgYXN5bmMsIHVzZXIsIF9yZXF1ZXN0LnBhc3N3b3JkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCBhc3luYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFzeW5jKSB7XG4gICAgICAgICAgICB4aHIudGltZW91dCA9IF9yZXF1ZXN0LnRpbWVvdXQ7XG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gX3JlcXVlc3QucmVzcG9uc2VUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBfcmVxdWVzdC53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIga2V5IGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChoZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgIHhoci5zZW5kKGJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHhociAmJiB4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZXh0cmFjdENvbnRlbnRUeXBlQW5kTWF5YmVTZXJpYWxpemVCb2R5KGJvZHksIGhlYWRlcnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFib2R5IHx8XG4gICAgICAgIHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJyB8fFxuICAgICAgICBpc0Zvcm1EYXRhKGJvZHkpIHx8XG4gICAgICAgIGlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpIHx8XG4gICAgICAgIGlzQXJyYXlCdWZmZXIoYm9keSkgfHxcbiAgICAgICAgaXNGaWxlKGJvZHkpIHx8XG4gICAgICAgIGlzQmxvYihib2R5KSB8fFxuICAgICAgICBpc1JlYWRhYmxlU3RyZWFtKGJvZHkpKSB7XG4gICAgICAgIHJldHVybiBib2R5O1xuICAgIH1cbiAgICBpZiAoaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHkuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gKF9hID0gaGVhZGVyc1snY29udGVudC10eXBlJ10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gYm9keSB0eXBlJyk7XG59XG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmZ1bmN0aW9uIHRvU3RyaW5nQ2hlY2sob2JqLCBuYW1lKSB7XG4gICAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIjtcbn1cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIoYm9keSkge1xuICAgIHJldHVybiB0b1N0cmluZ0NoZWNrKGJvZHksICdBcnJheUJ1ZmZlcicpO1xufVxuZnVuY3Rpb24gaXNGaWxlKGJvZHkpIHtcbiAgICByZXR1cm4gdG9TdHJpbmdDaGVjayhib2R5LCAnRmlsZScpO1xufVxuZnVuY3Rpb24gaXNCbG9iKGJvZHkpIHtcbiAgICByZXR1cm4gdG9TdHJpbmdDaGVjayhib2R5LCAnQmxvYicpO1xufVxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkge1xuICAgIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIEFycmF5QnVmZmVyLmlzVmlldyhib2R5KTtcbn1cbmZ1bmN0aW9uIGlzRm9ybURhdGEoYm9keSkge1xuICAgIHJldHVybiB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnICYmIGJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YTtcbn1cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpIHtcbiAgICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cbmZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW0oYm9keSkge1xuICAgIHJldHVybiB0eXBlb2YgUmVhZGFibGVTdHJlYW0gIT09ICd1bmRlZmluZWQnICYmIGJvZHkgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFqYXguanMubWFwIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzc2FnZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZXNzYWdlc19saXN0Jyk7XG4gIH1cblxuICByZW5kZXIoZW1haWwsIHRleHQsIHRpbWUpIHtcbiAgICB0aGlzLmVtYWlsID0gZW1haWwubGVuZ3RoIDw9IDIwID8gZW1haWwgOiBgJHtlbWFpbC5zdWJzdHIoMCwgMjApfS4uLmA7XG4gICAgdGhpcy50ZXh0ID0gdGV4dC5sZW5ndGggPD0gMTUgPyB0ZXh0IDogYCR7dGV4dC5zdWJzdHIoMCwgMTUpfS4uLmA7XG5cbiAgICBjb25zdCBuZXdNc2dIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGFjdFwiPiR7ZW1haWx9PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidGV4dFwiPiR7dGV4dH08L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lc3RhbXBcIj4ke3RpbWV9PC9kaXY+XG4gICAgPC9kaXY+YDtcbiAgICB0aGlzLmxpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgbmV3TXNnSFRNTCk7XG4gIH1cbn1cbiIsImltcG9ydCBBUEkgZnJvbSAnLi9BUEknO1xuXG5jb25zdCBhcHAgPSBuZXcgQVBJKCk7XG5hcHAuaW5pdCgpO1xuIiwiaW1wb3J0IHsgaW50ZXJ2YWwgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgYWpheCB9IGZyb20gJ3J4anMvYWpheCc7XG5pbXBvcnQgTWVzc2FnZSBmcm9tICcuL21lc3NhZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBUEkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBuZXcgTWVzc2FnZSgpO1xuICB9XG5cbiAgc3RyZWFtKCkge1xuICAgIHRoaXMubmV3TXNnJCA9IGFqYXguZ2V0SlNPTignaHR0cHM6Ly9hc3VjaC1yeGpzLmhlcm9rdWFwcC5jb20vbWVzc2FnZXMvdW5yZWFkJyk7XG4gICAgcmV0dXJuIGludGVydmFsKDQwMDApLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5uZXdNc2ckKSxcbiAgICAgIG1hcCgodmFsdWUpID0+IHZhbHVlLm1lc3NhZ2VzKSxcbiAgICApO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnN0cmVhbSQgPSB0aGlzLnN0cmVhbSgpO1xuICAgIHRoaXMuc3RyZWFtJC5zdWJzY3JpYmUoKG1lc3NhZ2VzKSA9PiB7XG4gICAgICBtZXNzYWdlcy5mb3JFYWNoKChtc2cpID0+IHtcbiAgICAgICAgdGhpcy5tZXNzYWdlLnJlbmRlcihtc2cuZnJvbSwgbXNnLnN1YmplY3QsIG1zZy5yZWNlaXZlZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0NvbXBsZXRlICYmICFpbm5lclN1YnNjcmliZXIgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBpbm5lclN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlubmVyU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdmFyIGlubmVySW5kZXggPSAwO1xuICAgICAgICAgICAgdmFyIG91dGVySW5kZXggPSBpbmRleCsrO1xuICAgICAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIG91dGVySW5kZXgpKS5zdWJzY3JpYmUoKGlubmVyU3Vic2NyaWJlciA9IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0U2VsZWN0b3IodmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgrKykgOiBpbm5lclZhbHVlKTsgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlubmVyU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcC5qcy5tYXAiLCJpbXBvcnQgeyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyB0aW1lciB9IGZyb20gJy4vdGltZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGludGVydmFsKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHBlcmlvZCA9PT0gdm9pZCAwKSB7IHBlcmlvZCA9IDA7IH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICBpZiAocGVyaW9kIDwgMCkge1xuICAgICAgICBwZXJpb2QgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGltZXIocGVyaW9kLCBwZXJpb2QsIHNjaGVkdWxlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbC5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBhc3luYyBhcyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgaXNWYWxpZERhdGUgfSBmcm9tICcuLi91dGlsL2lzRGF0ZSc7XG5leHBvcnQgZnVuY3Rpb24gdGltZXIoZHVlVGltZSwgaW50ZXJ2YWxPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGR1ZVRpbWUgPT09IHZvaWQgMCkgeyBkdWVUaW1lID0gMDsgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBpbnRlcnZhbER1cmF0aW9uID0gLTE7XG4gICAgaWYgKGludGVydmFsT3JTY2hlZHVsZXIgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXIoaW50ZXJ2YWxPclNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGludGVydmFsT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGR1ZSA9IGlzVmFsaWREYXRlKGR1ZVRpbWUpID8gK2R1ZVRpbWUgLSBzY2hlZHVsZXIubm93KCkgOiBkdWVUaW1lO1xuICAgICAgICBpZiAoZHVlIDwgMCkge1xuICAgICAgICAgICAgZHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChuKyspO1xuICAgICAgICAgICAgICAgIGlmICgwIDw9IGludGVydmFsRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIGludGVydmFsRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZHVlKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVyLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUuc2NoZWR1bGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTY2hlZHVsZXIuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWREYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4odmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEYXRlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9pc0Z1bmN0aW9uXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93VW5vYnNlcnZhYmxlRXJyb3IuanMubWFwIl0sIm5hbWVzIjpbImlzQ2FsbGFibGUiLCJ0cnlUb1N0cmluZyIsIiRUeXBlRXJyb3IiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJndW1lbnQiLCJpc09iamVjdCIsIiRTdHJpbmciLCJTdHJpbmciLCIkZm9yRWFjaCIsIlNUUklDVF9NRVRIT0QiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiZm9yRWFjaCIsImNhbGxiYWNrZm4iLCJ0aGlzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidG9JbmRleGVkT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwibGVuZ3RoT2ZBcnJheUxpa2UiLCJjcmVhdGVNZXRob2QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJ2YWx1ZSIsIk8iLCJpbmRleCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsImJpbmQiLCJ1bmN1cnJ5VGhpcyIsIkluZGV4ZWRPYmplY3QiLCJ0b09iamVjdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsInB1c2giLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9SRUpFQ1QiLCJOT19IT0xFUyIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInJlc3VsdCIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwiY3JlYXRlIiwidGFyZ2V0IiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlclJlamVjdCIsImZhaWxzIiwid2VsbEtub3duU3ltYm9sIiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiY29uc3RydWN0b3IiLCJmb28iLCJCb29sZWFuIiwibWV0aG9kIiwiY2FsbCIsImlzQXJyYXkiLCJpc0NvbnN0cnVjdG9yIiwiJEFycmF5IiwiQXJyYXkiLCJvcmlnaW5hbEFycmF5IiwiQyIsInByb3RvdHlwZSIsImFycmF5U3BlY2llc0NvbnN0cnVjdG9yIiwidW5jdXJyeVRoaXNSYXciLCJ0b1N0cmluZyIsInN0cmluZ1NsaWNlIiwic2xpY2UiLCJpdCIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImNsYXNzb2ZSYXciLCJUT19TVFJJTkdfVEFHIiwiJE9iamVjdCIsIk9iamVjdCIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidGFnIiwia2V5IiwiZXJyb3IiLCJ0cnlHZXQiLCJjYWxsZWUiLCJoYXNPd24iLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJzb3VyY2UiLCJleGNlcHRpb25zIiwia2V5cyIsImRlZmluZVByb3BlcnR5IiwiZiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImkiLCJERVNDUklQVE9SUyIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdCIsImJpdG1hcCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInRvUHJvcGVydHlLZXkiLCJwcm9wZXJ0eUtleSIsIm1ha2VCdWlsdEluIiwiZGVmaW5lR2xvYmFsUHJvcGVydHkiLCJvcHRpb25zIiwic2ltcGxlIiwibmFtZSIsImdsb2JhbCIsInVuc2FmZSIsIm5vbkNvbmZpZ3VyYWJsZSIsIm5vbldyaXRhYmxlIiwiZ2V0IiwiZG9jdW1lbnRBbGwiLCJkb2N1bWVudCIsImFsbCIsIklTX0hUTUxEREEiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjbGFzc0xpc3QiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJET01Ub2tlbkxpc3RQcm90b3R5cGUiLCJnZXRCdWlsdEluIiwibWF0Y2giLCJ2ZXJzaW9uIiwidXNlckFnZW50IiwicHJvY2VzcyIsIkRlbm8iLCJ2ZXJzaW9ucyIsInY4Iiwic3BsaXQiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJkZWZpbmVCdWlsdEluIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0IiwiZG9udENhbGxHZXRTZXQiLCJmb3JjZWQiLCJzaGFtIiwiZXhlYyIsImFDYWxsYWJsZSIsIk5BVElWRV9CSU5EIiwiZm4iLCJhcHBseSIsInRlc3QiLCJoYXNPd25Qcm9wZXJ0eSIsIkZ1bmN0aW9uIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXREZXNjcmlwdG9yIiwiUFJPUEVSIiwiQ09ORklHVVJBQkxFIiwidW5jdXJyeVRoaXNXaXRoQmluZCIsImFGdW5jdGlvbiIsIm5hbWVzcGFjZSIsImlzTnVsbE9yVW5kZWZpbmVkIiwiViIsIlAiLCJmdW5jIiwiY2hlY2siLCJNYXRoIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsImciLCJhIiwiY2xhc3NvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsInNldCIsImhhcyIsIk5BVElWRV9XRUFLX01BUCIsInNoYXJlZCIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJzdGF0ZSIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwidHlwZSIsIiRkb2N1bWVudEFsbCIsIm5vb3AiLCJlbXB0eSIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yUmVnRXhwIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsImlzQ29uc3RydWN0b3JNb2Rlcm4iLCJpc0NvbnN0cnVjdG9yTGVnYWN5IiwiY2FsbGVkIiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiZGF0YSIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiaXNQcm90b3R5cGVPZiIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiJFN5bWJvbCIsInRvTGVuZ3RoIiwib2JqIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiQ09ORklHVVJBQkxFX0xFTkdUSCIsIlRFTVBMQVRFIiwiZ2V0dGVyIiwic2V0dGVyIiwiYXJpdHkiLCJqb2luIiwiY2VpbCIsImZsb29yIiwidHJ1bmMiLCJ4IiwibiIsIklFOF9ET01fREVGSU5FIiwiVjhfUFJPVE9UWVBFX0RFRklORV9CVUciLCJhbk9iamVjdCIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJBdHRyaWJ1dGVzIiwiY3VycmVudCIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hbWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsInVpZCIsIlNIQVJFRCIsIklTX1BVUkUiLCJtb2RlIiwiY29weXJpZ2h0IiwibGljZW5zZSIsInN5bWJvbCIsIlN5bWJvbCIsInRvSW50ZWdlck9ySW5maW5pdHkiLCJtYXgiLCJtaW4iLCJpbnRlZ2VyIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsIm51bWJlciIsImlzU3ltYm9sIiwiZ2V0TWV0aG9kIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsIlRPX1BSSU1JVElWRSIsImV4b3RpY1RvUHJpbSIsInRvUHJpbWl0aXZlIiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiTkFUSVZFX1NZTUJPTCIsIml0ZXJhdG9yIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwic3ltYm9sRm9yIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImRlc2NyaXB0aW9uIiwiJCIsImRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciIsImNyZWF0ZVByb3BlcnR5IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJwcm90byIsImFyZyIsImsiLCJsZW4iLCJFIiwiQSIsIkRPTUl0ZXJhYmxlcyIsImhhbmRsZVByb3RvdHlwZSIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJDT0xMRUNUSU9OX05BTUUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZSIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicCIsIl9fZXh0ZW5kcyIsIl9fIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJ0IiwicyIsIl9fZ2VuZXJhdG9yIiwidGhpc0FyZyIsImJvZHkiLCJ5IiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJuZXh0IiwidmVyYiIsInYiLCJvcCIsImRvbmUiLCJwb3AiLCJzdGVwIiwiX192YWx1ZXMiLCJvIiwibSIsIl9fcmVhZCIsInIiLCJhciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwibCIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJxIiwiUHJvbWlzZSIsInJlc3VtZSIsInJlc29sdmUiLCJ0aGVuIiwiZnVsZmlsbCIsInJlamVjdCIsInNldHRsZSIsInNoaWZ0IiwiaXNGdW5jdGlvbiIsImNyZWF0ZUVycm9yQ2xhc3MiLCJjcmVhdGVJbXBsIiwiY3RvckZ1bmMiLCJpbnN0YW5jZSIsIkVycm9yIiwic3RhY2siLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiX3N1cGVyIiwiZXJyb3JzIiwibWVzc2FnZSIsImVyciIsImFyclJlbW92ZSIsImFyciIsIml0ZW0iLCJzcGxpY2UiLCJTdWJzY3JpcHRpb24iLCJpbml0aWFsVGVhcmRvd24iLCJjbG9zZWQiLCJfcGFyZW50YWdlIiwiX2ZpbmFsaXplcnMiLCJ1bnN1YnNjcmliZSIsImVfMSIsIl9hIiwiZV8yIiwiX2IiLCJfcGFyZW50YWdlXzEiLCJfcGFyZW50YWdlXzFfMSIsInJlbW92ZSIsImVfMV8xIiwicmV0dXJuIiwiaW5pdGlhbEZpbmFsaXplciIsIl9maW5hbGl6ZXJzXzEiLCJfZmluYWxpemVyc18xXzEiLCJmaW5hbGl6ZXIiLCJleGVjRmluYWxpemVyIiwiZV8yXzEiLCJhZGQiLCJ0ZWFyZG93biIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwicGFyZW50IiwiX3JlbW92ZVBhcmVudCIsIkVNUFRZIiwiaXNTdWJzY3JpcHRpb24iLCJBY3Rpb24iLCJzY2hlZHVsZXIiLCJ3b3JrIiwic2NoZWR1bGUiLCJkZWxheSIsImludGVydmFsUHJvdmlkZXIiLCJzZXRJbnRlcnZhbCIsImhhbmRsZXIiLCJ0aW1lb3V0IiwiYXJncyIsIl9pIiwiZGVsZWdhdGUiLCJjbGVhckludGVydmFsIiwiaGFuZGxlIiwiQXN5bmNBY3Rpb24iLCJfdGhpcyIsInBlbmRpbmciLCJyZWN5Y2xlQXN5bmNJZCIsInJlcXVlc3RBc3luY0lkIiwiX2lkIiwiZmx1c2giLCJfc2NoZWR1bGVyIiwiZXhlY3V0ZSIsIl9leGVjdXRlIiwiX2RlbGF5IiwiZXJyb3JWYWx1ZSIsImVycm9yZWQiLCJhY3Rpb25zIiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIiwibm93IiwiRGF0ZSIsIlNjaGVkdWxlciIsInNjaGVkdWxlckFjdGlvbkN0b3IiLCJhc3luY1NjaGVkdWxlciIsIkFzeW5jU2NoZWR1bGVyIiwiU2NoZWR1bGVyQWN0aW9uIiwiX2FjdGl2ZSIsImFjdGlvbiIsImNvbmZpZyIsInRpbWVvdXRQcm92aWRlciIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJjb250ZXh0IiwiU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJjb21wbGV0ZSIsIlNhZmVTdWJzY3JpYmVyIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm5leHROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIl9iaW5kIiwiQ29uc3VtZXJPYnNlcnZlciIsInBhcnRpYWxPYnNlcnZlciIsImhhbmRsZVVuaGFuZGxlZEVycm9yIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0XzEiLCJlcnJvclRocm93biIsIm5vdGlmaWNhdGlvbiIsInN1YnNjcmliZXIiLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwicmVkdWNlIiwicHJldiIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwiaXNPYnNlcnZlciIsImNiIiwiaXNSb290IiwiZXJyb3JDb250ZXh0IiwiX3RyeVN1YnNjcmliZSIsInNpbmsiLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicGlwZSIsIm9wZXJhdGlvbnMiLCJ0b1Byb21pc2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsIl9fYXN5bmNWYWx1ZXMiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImNhdGNoIiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsInByb2plY3QiLCJnZXRYSFJSZXNwb25zZSIsInhociIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlIiwiaWVYSFIiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZVhNTCIsIkFqYXhSZXNwb25zZSIsIm9yaWdpbmFsRXZlbnQiLCJyZXF1ZXN0Iiwic3RhdHVzIiwiYWxsSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlSGVhZGVycyIsImhlYWRlcnMiLCJsaW5lIiwibG9hZGVkIiwidG90YWwiLCJBamF4RXJyb3IiLCJBamF4VGltZW91dEVycm9yIiwiQWpheFRpbWVvdXRFcnJvckltcGwiLCJtYXBSZXNwb25zZSIsImFqYXgiLCJ1cmxPckNvbmZpZyIsInVybCIsInNlYXJjaFBhcmFtc18xIiwiYXN5bmMiLCJjcm9zc0RvbWFpbiIsIndpdGhDcmVkZW50aWFscyIsInF1ZXJ5UGFyYW1zIiwiY29uZmlndXJlZEJvZHkiLCJjb25maWd1cmVkSGVhZGVycyIsInBhcnRzIiwiVVJMU2VhcmNoUGFyYW1zIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsInhzcmZDb29raWUiLCJjb29raWUiLCJSZWdFeHAiLCJGb3JtRGF0YSIsImlzRm9ybURhdGEiLCJpc1VSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nQ2hlY2siLCJpc0FycmF5QnVmZmVyIiwiaXNGaWxlIiwiaXNCbG9iIiwiUmVhZGFibGVTdHJlYW0iLCJpc1JlYWRhYmxlU3RyZWFtIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsInN0cmluZ2lmeSIsImV4dHJhY3RDb250ZW50VHlwZUFuZE1heWJlU2VyaWFsaXplQm9keSIsIl9yZXF1ZXN0IiwiY3JlYXRlWEhSIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm9ncmVzc1N1YnNjcmliZXJfMSIsInByb2dyZXNzU3Vic2NyaWJlciIsIl9jIiwiaW5jbHVkZURvd25sb2FkUHJvZ3Jlc3MiLCJfZCIsImluY2x1ZGVVcGxvYWRQcm9ncmVzcyIsImFkZEVycm9yRXZlbnQiLCJlcnJvckZhY3RvcnkiLCJhZGRFdmVudExpc3RlbmVyIiwiY3JlYXRlUmVzcG9uc2VfMSIsImRpcmVjdGlvbiIsImV2ZW50IiwiYWRkUHJvZ3Jlc3NFdmVudF8xIiwiTE9BRFNUQVJUIiwiUFJPR1JFU1MiLCJMT0FEIiwidXBsb2FkIiwiVVBMT0FEIiwiRE9XTkxPQUQiLCJlbWl0RXJyb3JfMSIsIm1zZyIsInVzZXIiLCJvcGVuIiwicGFzc3dvcmQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInJlYWR5U3RhdGUiLCJhYm9ydCIsInBvc3QiLCJkZWxldGUiLCJwdXQiLCJwYXRjaCIsImdldEpTT04iLCJfdG9TdHJpbmciLCJNZXNzYWdlIiwibGlzdCIsInF1ZXJ5U2VsZWN0b3IiLCJlbWFpbCIsInRleHQiLCJ0aW1lIiwic3Vic3RyIiwibmV3TXNnSFRNTCIsImluc2VydEFkamFjZW50SFRNTCIsInBlcmlvZCIsIm5ld01zZyQiLCJkdWVUaW1lIiwiaW50ZXJ2YWxPclNjaGVkdWxlciIsImludGVydmFsRHVyYXRpb24iLCJkdWUiLCJpc05hTiIsImlzVmFsaWREYXRlIiwidGltZXIiLCJpbm5lclN1YnNjcmliZXIiLCJpc0NvbXBsZXRlIiwiY2hlY2tDb21wbGV0ZSIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJvYnMiLCJwcm9taXNlIiwiaXNBc3luY0l0ZXJhYmxlIiwiaXNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImdldFJlYWRlciIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwicmVhZGFibGVTdHJlYW0iLCJyZWFkZXIiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwiY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IiLCJpbm5lckZyb20iLCJpbm5lclZhbHVlIiwibWVzc2FnZXMiLCJzdHJlYW0kIiwic3RyZWFtIiwicmVuZGVyIiwic3ViamVjdCIsInJlY2VpdmVkIl0sInNvdXJjZVJvb3QiOiIifQ==